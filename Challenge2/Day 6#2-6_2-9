--------------------------------------------------------------------------------------------------
문제
https://replit.com/@evencoding/Day-Six-Blueprint#main.py
--------------------------------------------------------------------------------------------------
"""
내 답
"""
--------------------------------------------------------------------------------------------------
"""
His
"""
https://replit.com/@evencoding/Day6-1#main.py
--------------------------------------------------------------------------------------------------
오늘의 강의: 파이썬으로 웹 스크래퍼 만들기 2.6 - 2.9
--------------------------------------------------------------------------------------------------
Challenge goals:
    어제 완성한 코드에 다음 작업을 수행할 수 있도록 기능을 확장하세요.
--------------------------------------------------------------------------------------------------
조건
    완성한 프로그램은 다음과 같이 작동해야 됩니다. : watch the video (https://i.imgur.com/J7jfXcJ.mp4)
    국가와 통화 코드 목록이 출력된 후 사용자는 두 개의 국가를 선택할 수 있습니다.
    그리고나서 사용자는 국가 a와 국가b 사이에서 환전하고자 하는 금액을 입력합니다.
    두 나라의 통화 코드와 환전하려는 금액을 다음과 같은 URL(https://wise.com/gb/currency-converter/gbp-to-usd-rate?amount=50)로 보냅니다.
    beautifulSoup 라이브러리를 사용하여 Transfer Wise 사이트에서 정보를 긁어와 환전 결과를 얻습니다.
--------------------------------------------------------------------------------------------------
힌트
    환전 결과 값을 나타내는 "Convert to"의 value값은 홈페이지 코드 변경으로 인해 가져올 수 없으니 다른 방식으로 접근하셔야 합니다.
    홈페이지에서 환전 정보를 가져올 때 requests 와 beautifulSoup 라이브러리만 이용하여도 충분히 가져올 수 있는 방법이 존재합니다.
    예를 들어, 미국 2달러(Amount)를 한국 돈으로 환전하고 싶으면 홈페이지 Converted to 아랫부분에 “1 USD = 1108.30000 KRW” 라고 1달러당 현재 환율이 표기되어 있는데 “1108.30000” 부분을 추출해서 Amount와 곱해주시면 구하고자 하는 환전 값을 얻을 수 있습니다.
    블루프린트에 작성되어 있는 format_currency(5000, "KRW", locale="ko_KR")는 5000이란 숫자를 한국 통화(KRW) 형식으로 변환하여 “₩5,000”으로 출력시켜줍니다. 만약 달러 형식으로 변환하고 싶다면 “KRW” 대신 “USD”를 넣어 “$5,000.00”의 결과값을 얻을 수 있습니다.
    참고문서 : format_currency() (http://babel.pocoo.org/en/latest/api/numbers.html#babel.numbers.format_currency)
--------------------------------------------------------------------------------------------------
정답 해설
1. ask_country(text) 함수 (Line 34 ~ 46)
    -지난 시간에 완성했던 ask() 함수와 거의 비슷하나 43번째 줄에서 countries[choice] 값을 리턴해주는 부분이 추가되었습니다.
2. user_country, target_country 값 구하기 (Line 64 ~ 65)
    -ask_country(text) 함수를 불러와 사용자가 고른 나라의 이름과 통화 코드를 저장 시켜줍니다.
    -user_country, target_country 모두 같은 방식으로 동작합니다.
3. amount 값 구하기 (Line 68)
    -사용자가 얼마만큼의 돈을 환전할지 알아내야 합니다.
    -그러기 위해선 ask_amount 함수를 작성하여 인자 값으로 user_country, target_country 를 보내야합니다.
4. ask_amount(a_country, b_country) 함수 (Line 49 ~ 56)
    -사용자가 선택한 두 나라의 정보를 인자 값으로 받아왔습니다.
    -두 나라의 정보는 오로지 사용자에게 질문을 던지는 출력문에만 쓰입니다.
    -amount = int(input()) 을 사용하여 사용자에게 환전할 돈의 양을 묻습니다.
    -돈은 숫자이므로 반드시 int() 로 감싸서 형변환 시켜줍니다.
    -그리고 amount 값을 리턴 시켜줍니다.
    -사용자가 만약 숫자가 아닌 문자를 입력했을 경우를 대비하여 try-except문을 사용하여 예외처리를 해줍니다.
5. 사용자가 선택한 두 나라의 통화 코드(from_code, to_code) 가져오기 (Line 70 ~ 71)
    -2번에서 구한 user_country, target_country 값을 이용하여 간단히 통화 코드를 가져올 수 있습니다.
    -각각의 새로운 변수에 user_country['code'] , target_country['code'] 를 넣어주시면 오로지 통화 코드만 저장되는 것을 볼 수 있습니다.
6. 홈페이지에서 환전 결과를 가져오기 (Line 73 ~ 80)
    -스크래핑을 하기에 앞서, requests 라이브러리를 이용하여 Transfer Wise 홈페이지에 HTTP 요청을 보내야합니다.
    -사용자로부터 입력을 받은 정보들을 URL에 포맷팅하여 GET 방식으로 HTTP 요청을 아래와 같은 코드로 보냅니다.
    -currency_request = requests.get(f"{currency_url}{from_code}-to-{to_code}-rate?amount={amount}")
    -beautifulSoup 라이브러리를 사용하여 해당 홈페이지의 html 코드들을 가져옵니다.
    -위의 사진은 환전 결과 값을 가져오기 위해 크롬 개발자 도구에서 inspect한 결과입니다.
    -홈페이지의 코드 변경으로 인해 환전 결과의 value 값을 가져올 수 없습니다.
    -그러므로 환전 결과 값을 가져오는 것이 아니라 다른 방법으로 접근하여야 됩니다.
    -홈페이지 하단에 보시면 1 COP = 0.30937 KRW 이라는 값이 있는데 초록색 글씨로 되어있는 0.30937 을 긁어와서 amount 값이랑 곱해주는 것으로 환전 결과 값을 얻을 수 있습니다.
    -저 초록색 값을 가져오기 위해 rate = currency_soup.find("span", {"class":"text-success"}).get_text() 이라는 코드를 작성해줍니다.
    -혹시 rate 값이 존재하지 않을 경우도 생각하여 if rate: 를 사용하여 rate 값이 존재할 때만 환전 값을 구하도록 코드를 작성합니다.
    -위에서 구한 rate 값을 float 형식으로 변환한 다음 amount 값이랑 곱하여 환전 값을 구하기 위해 아래와 같이 작성합니다.
    -result = float(rate) * amount
    -마지막으로 환전할 돈의 양(amount) , 환전 결과(result) 를 format_currency() 를 이용하여 통화 형식으로 포맷 시켜줍니다.
결론
    홈페이지의 코드 변경으로 인해 환전 결과 값을 바로 가져올 수 없게 되어 다른 방법을 생각해서 해결해야 되는 챌린지였습니다.
    같은 홈페이지여도 시간이 지남에 따라 html코드가 변경 되는 경우가 꽤 있으므로 주의하여야 합니다.
--------------------------------------------------------------------------------------------------