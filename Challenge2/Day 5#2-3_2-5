--------------------------------------------------------------------------------------------------
문제
https://replit.com/@evencoding/Day-Five-Blueprint-1#main.py
--------------------------------------------------------------------------------------------------
"""
내 답
"""
--------------------------------------------------------------------------------------------------
"""
His
"""
https://replit.com/@evencoding/Day5-1#main.py
--------------------------------------------------------------------------------------------------
오늘의 강의: 파이썬으로 웹 스크래퍼 만들기 2.3 - 2.5
--------------------------------------------------------------------------------------------------
Challenge goals:
    보일러플레이트를 사용하여 웹사이트에서 국가 리스트와 해당 국가의 통화 코드를 스크래핑 하여 사용자가 국가를 선택하면 해당 국가의 국가 코드를 표시하는 프로그램을 만드세요.
    해당 부분은 다음 챌린지에서 완성할 "국가 스크래핑" 프로젝트의 일부분입니다.
--------------------------------------------------------------------------------------------------
조건
    이 프로그램은 이러한 방식으로 작동합니다: watch the video(https://i.imgur.com/Nh7nkjF.mp4)
    국가와 통화를 가져오는 웹사이트(https://www.iban.com/currency-codes)는 다음과 같습니다.
    리스트에 국가 이름과 "국가 부호 코드(Alpha-3 code)"를 저장하세요.
    몇몇의 나라들은 통화 코드를 가지고 있지 않습니다. ( No universal currency 라고 표기되어 있음) 이러한 경우에는 리스트에 추가하지 마세요.
    사용자의 입력을 확인하여 그 입력 값이 국가 목록에 해당하는 숫자 범위면 프로그램이 동작하고 그 외의 값들은 동작하지 않습니다.
    국가를 선택하면 국가 이름과 통화 코드를 표시해줍니다.
    니꼬 힌트1: Use try/except when converting strings to numbers. ( int(input()) )
    니꼬 힌트2: Index in 'for' loops?
--------------------------------------------------------------------------------------------------
힌트
    만약 사용자가 숫자가 아닌 다른 문자를 입력하여 (int(input()) 을 사용하게 되면 에러가 뜹니다. 문자는 절대 숫자로 변환시킬 수 없기 때문입니다. 이를 해결하기 위해 try/except 문을 사용하세요. except ValueError: 를 사용하면 형변환 관련 에러를 처리할 수 있습니다.
    참고문서 : 예외 처리하기 (https://docs.python.org/ko/3/tutorial/errors.html#handling-exceptions)
    BeautifulSoup의 .find()는 찾고자 하는 값을 최초로 일치하는 값만 가져옵니다.
    참고문서 : find() (https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find)
    BeautifulSoup의 .find_all() 은 해당하는 값들을 모두 찾아 리스트 형식으로 저장됩니다.
    리스트 형식으로 저장되므로 찾은 값들을 하나하나 꺼내보고 싶을 땐 for문을 이용해야 됩니다.
    참고문서 : find_all() (https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all)
    .find() 나 find_all()을 이용해 찾은 값들에서 문자만 추출하기 위해선 .get_text() 또는 .text를 이용합니다.
    참고문서 : .get_text() (https://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text)
    나라 이름을 가져오면 모두 대문자로 되어있는데 보기 좋게 첫 글자만 대문자, 나머지는 소문자로 바꾸기 위해 .capitalize()를 사용합니다.
    참고문서 : str.capitalize() (https://docs.python.org/ko/3/library/stdtypes.html?highlight=capitalize#str.capitalize)
--------------------------------------------------------------------------------------------------
정답 해설
1. 홈페이지에서 국가와 통화 목록 스크래핑 하기
    requests 모듈을 이용해 해당 홈페이지의 GET 요청을 보냅니다.
    BeautifulSoup 라이브러리를 사용하여 soup = BeautifulSoup(request.text, "html.parser") 라는 코드를 작성하시면 해당 홈페이지의 html 코드들을 가져오실 수 있습니다.
    필요한 정보는 국가들과 통화 코드들 입니다. 해당 정보가 있는 곳의 html코드를 보면 <table> 태그 안에 정보가 들어 있는 것을 확인할 수 있습니다.
    table = soup.find("table") 으로 <table> 코드 안에 있는 모든 html 코드들을 가져옵니다.
    <table> 코드 안에 있는 각각의 행들의 정보를 가져오기 위해 rows = table.find_all("tr")[1:] 라는 코드를 작성합니다.
    table.find_all("tr")[1:] 뒷부분에 [1:] 이 붙는 이유는 <tr> 태그들의 맨 첫 번째 항목은 헤더 부분이기 때문에 이 부분은 필요가 없으므로 이를 제외하고 rows 리스트에 저장 시키기 위해서입니다.
    rows 리스트에 저장된 각각의 행들의 정보를 차례로 가져오기 위해 for row in rows: 라는 반복문을 사용합니다.
    <tr> 태그 밑에는 4개의 <td> 태그가 존재합니다. 순서대로 나라 이름, 통화명, 통화 코드, 번호의 정보를 가지고 있습니다.
    items = row.find_all("td") 를 사용하여 4개의 <td> 태그에 담긴 정보들을 items 리스트에 저장합니다.
    필요로 하는 정보는 국가 이름과 통화 코드 입니다. 국가 이름은 items[0] 에 통화 코드는 items[2] 에 저장 되어 있으므로 .text 를 사용하여 문자만 추출합니다.
    논리연산 and를 이용하여 만약 name 과 code 모두 값이 존재할 때만 작동한다는 조건문 if name and code : 을 작성합니다.
    country 딕셔너리에 국가 이름과 통화 코드를 추가하기 위해 country = {'name':name.capitalize(),' code': code} 와 같은 코드를 작성합니다.
    countries.append(country) 로 countries 리스트 안에 country 딕셔너리를 넣어줍니다.
    각 정보들은 리스트 안에 딕셔너리가 들어있는 아래와 같은 형태로 저장이 됩니다.
    [{'name': 'Afghanistan', 'code': 'AFN'}, {'name': 'Åland islands', 'code': 'EUR'}, ........]
2. 사용자에게 입력 번호 묻는 함수 ask()
    사용자에게 입력을 받아 countries 리스트의 인덱스와 일치하는 정보를 출력해줍니다.
    만약 숫자가 아닌 문자나 countries 리스트의 인덱스 외의 숫자를 입력 받으면 해당 정보를 찾을 수 없다는 경고를 출력해주기 위해 try-except문을 사용합니다.
    먼저 사용자에게 입력 받은 값을 choice = int(input("#: ")) 를 사용하여 정수형으로 변환시켜줍니다.
    단, 사용자가 "abcd" 같은 문자를 입력하면 위의 코드를 사용하여도 절대 정수로 변환시킬 수 없는데 이러한 경우 "ValueError"가 발생하므로 except ValueError: 를 사용하여 에러 처리를 해주면 됩니다.
    if choice >= len(countries) or choice <0: 를 사용하여 choice가 리스트의 인덱스 범위보다 크거나 0보다 작으면 리스트 안에 있는 번호를 선택 하라는 메세지를 출력시켜주고 ask() 함수를 다시 불러옵니다.
    프로그램 실행 시 국가 리스트들 모두 출력해주기
    프로그램을 실행시키면 국가와 통화를 스크래핑 하여 그 결과를 차례로 번호를 매겨 모두 출력시켜야 됩니다.
    스크래핑 해온 모든 정보가 담긴 countries 리스트를 번호를 매겨 차례로 출력 시키기 위해서 for문을 사용하여 아래와 같이 코딩해주시면 됩니다.
    enumerate는 "열거하다" 라는 의미로 자료형을 입력받으면 인덱스 값을 포함 시켜서 enumerate 객체를 돌려줍니다.
    enumerate(countries) 를 이용해 인덱스 값을 포함시켜 다시 돌려 받았으므로 적절히 포맷팅을 하여(위 사진 2번째 줄 참고) 챌린지 예시 동영상과 비슷한 형태로 출력되게 만들면 됩니다.
결론
    그동안 강의에서 배웠던 requests 와 BeautifulSoup 라이브러리를 사용하여 웹 스크래핑을 해보는 첫 챌린지였습니다.
    웹 스크래핑을 할 땐 각각의 사이트마다 html 코드들이 다르므로 상황에 따라 다르게 코딩해야 되므로 여러 웹 사이트들을 스크래핑 하는 연습을 많이 하시는 것을 추천드립니다.
--------------------------------------------------------------------------------------------------