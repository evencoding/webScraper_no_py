--------------------------------------------------------------------------------------------------
문제
    https://replit.com/@evencoding/Day-Three-Blueprint-1#main.py
--------------------------------------------------------------------------------------------------
https://replit.com/@evencoding/Day-Three-Blueprint-2#main.py
"""
내 답
"""
def add_to_dict(dic, word="", defi=""):
  if type(dic) != dict:
    return print(f"You need to send a dictionary. You sent: {type(dic)}")
  elif defi == "":
    return print(f"You need to send a word and a definition")
  else:
    if word in dic:
      return print(f"{word} is already on the dictionary. Won't add.")
    else:
      dic[f"{word}"] = defi
      return print(f"{word} has been added.")


def get_from_dict(dic, word=""):
  if type(dic) != dict:
    return print(f"You need to send a dictionary. You sent: {type(dic)}")
  elif word == "":
    return print("You need to send a word to search for.")
  else:
    if word in dic:
      print(f"{word}:", dic[f"{word}"])
    else:
      print(f"{word} was not found in this dict.")

def update_word(dic, word="", defi=""):
  if type(dic) != dict:
    return print(f"You need to send a dictionary. You sent: {type(dic)}")
  elif word in dic:
    if defi == "":
      return print("You need to send a word and a definition to update.")
    else:
      dic[f"{word}"] = defi
      return print(f"{word} has been updated to:", defi)
  else:
    return print(f"{word} is not on the dict. Can't update non-existing word.")


def delete_from_dict(dic, word=""):
  if type(dic) != dict:
    return print(f"You need to send a dictionary. You sent: {type(dic)}")
  elif word == "":
    return print("You need to specify a word to delete.")
  else:
    if word in dic:
      del(dic[f"{word}"])
      return print(f"{word} has been deleted.")
    else:
      return print(f"{word} is not in this dict. Won't delete.")

# \/\/\/\/\/\/\ DO NOT TOUCH  \/\/\/\/\/\/\

import os

os.system('clear')

my_english_dict = {}

print("\n###### add_to_dict ######\n")

# Should not work. First argument should be a dict.
print('add_to_dict("hello", "kimchi"):')
add_to_dict("hello", "kimchi")

# Should not work. Definition is required.
print('\nadd_to_dict(my_english_dict, "kimchi"):')
add_to_dict(my_english_dict, "kimchi")

# Should work.
print('\nadd_to_dict(my_english_dict, "kimchi", "The source of life."):')
add_to_dict(my_english_dict, "kimchi", "The source of life.")

# Should not work. kimchi is already on the dict
print('\nadd_to_dict(my_english_dict, "kimchi", "My fav. food"):')
add_to_dict(my_english_dict, "kimchi", "My fav. food")


print("\n\n###### get_from_dict ######\n")

# Should not work. First argument should be a dict.
print('\nget_from_dict("hello", "kimchi"):')
get_from_dict("hello", "kimchi")

# Should not work. Word to search from is required.
print('\nget_from_dict(my_english_dict):')
get_from_dict(my_english_dict)

# Should not work. Word is not found.
print('\nget_from_dict(my_english_dict, "galbi"):')
get_from_dict(my_english_dict, "galbi")

# Should work and print the definiton of 'kimchi'
print('\nget_from_dict(my_english_dict, "kimchi"):')
get_from_dict(my_english_dict, "kimchi")

print("\n\n###### update_word ######\n")

# Should not work. First argument should be a dict.
print('\nupdate_word("hello", "kimchi"):')
update_word("hello", "kimchi")

# Should not work. Word and definiton are required.
print('\nupdate_word(my_english_dict, "kimchi"):')
update_word(my_english_dict, "kimchi")

# Should not work. Word not found.
print('\nupdate_word(my_english_dict, "galbi", "Love it."):')
update_word(my_english_dict, "galbi", "Love it.")

# Should work.
print('\nupdate_word(my_english_dict, "kimchi", "Food from the gods."):')
update_word(my_english_dict, "kimchi", "Food from the gods.")

# Check the new value.
print('\nget_from_dict(my_english_dict, "kimchi"):')
get_from_dict(my_english_dict, "kimchi")


print("\n\n###### delete_from_dict ######\n")

# Should not work. First argument should be a dict.
print('\ndelete_from_dict("hello", "kimchi"):')
delete_from_dict("hello", "kimchi")

# Should not work. Word to delete is required.
print('\ndelete_from_dict(my_english_dict):')
delete_from_dict(my_english_dict)

# Should not work. Word not found.
print('\ndelete_from_dict(my_english_dict, "galbi"):')
delete_from_dict(my_english_dict, "galbi")

# Should work.
print('\ndelete_from_dict(my_english_dict, "kimchi"):')
delete_from_dict(my_english_dict, "kimchi")

# Check that it does not exist
print('\nget_from_dict(my_english_dict, "kimchi"):')
get_from_dict(my_english_dict, "kimchi")

# \/\/\/\/\/\/\ END DO NOT TOUCH  \/\/\/\/\/\/\
--------------------------------------------------------------------------------------------------
"""
His
"""
--------------------------------------------------------------------------------------------------
오늘의 강의: 파이썬으로 웹 스크래퍼 만들기 1.10 - 1.11
오늘의 과제: 위의 강의를 시청하신 후, 아래 코드 챌린지를 제출하세요.
제출기간: 익일 오전 6시까지
--------------------------------------------------------------------------------------------------
오늘의 과제를 열어보시면 제대로 작동하지 않습니다. 함수들이 다 작성되어 있지 않기 때문입니다. 여러분들이 코드를 실행시키면 아래와 같은 결과가 나와야 됩니다.
--------------------------------------------------------------------------------------------------
조건
    아래와 같은 함수들을 만드세요.
    add_to_dict
    get_from_dict
    update_word
    delete_from_dict
    모든 함수들은 에러를 검사하고 스크립트에 작성되어 있는 코멘트와 같이 작동해야 됩니다. 또한 실행 시 콘솔에 파이썬 에러가 없어야 합니다. “DO NOT TOUCH AREA” 내부는 절대 변경하지 마세요.
    위의 스크린과 같은 모습이 되도록 코드를 고쳐보세요.
    반드시 위 표기된 함수들 (add_to_dict. get_from_dict. update_word.delete_from_dict) 생성해야합니다.
    DO NOT TOUCH 영역은 건들지마세요!
    힌트: Dict documentation (https://bit.ly/2CzKsQE)
--------------------------------------------------------------------------------------------------
힌트
    파이썬의 딕셔너리를 연습하는 챌린지입니다. 아래의 딕셔너리 관련 문서를 참고해주세요.
    참고문서 : 딕셔너리, 매핑 형 - dict()
    파이썬의 제어문인 if문을 활용해보세요. (물론 if문 안에 if문을 사용하는 것도 가능합니다.(중첩 if문))
    참고문서 : if문
    논리연산 and는 둘 중 모두 참이면 True, 모두 거짓이면 False를 리턴하고 논리연산 or은 둘 중 하나라도 참이면 True, 둘 중 하나라도 거짓이면 False를 리턴합니다.
    참고문서 : 논리연산 and, or, not
    type() 내장함수를 이용하면 쉽게 타입검사를 할 수 있습니다.
    참고문서 : type()
--------------------------------------------------------------------------------------------------
1. is_on_list(a_list = [], word= "")
    is_on_list 함수는 days리스트와 단어를 받아와서 해당 단어가 days리스트에 존재하면 True를 그렇지 않으면 False를 반환하는 함수입니다.
    연산자 in을 이용해 간단히 구현할 수 있습니다. 참고 링크
    word in a_list
    in 연산자를 이용해 위와 같은 형태로 작성하시면 됩니다. a_list안에 word가 존재하면 True 값을 그렇지 않으면 False 값을 반환합니다.
2. get_x(a_list = [], index = 0)
    get_x 함수는 days리스트와 index 값을 받아와서 days리스트 안에서 해당 index가 가리키는 값을 반환해주는 함수입니다.
    리스트(List)에서 특정 인덱스(Index)에 해당하는 값을 추출하려면 List[index]라고 작성해주시면 됩니다. 참고 링크
    따라서 get_x 함수의 리턴 값은 a_list[index] 라고 적으시면 됩니다.
    days리스트와 index 값으로 3을 가져 왔으므로 days리스트에서 인덱스 3에 해당하는 값을 리턴시켜줍니다. 리스트의 인덱스 값은 0부터 시작하므로 days리스트의 세번째 값은 "Thu" 입니다.
3. add_x(a_list = [], word = "")
    add_x 함수는 days리스트와 특정 단어를 받아와서 단어를 days리스트에 추가해주는 함수입니다.
    리스트의 끝부분에 특정 요소를 추가하기 위해선 append() 메서드를 사용합니다.
    참고 링크
    따라서 함수 add_x 의 리턴 값은 a_list.append(word) 라고 작성해주시면 됩니다.
4. remove_x(a_list = [], word ="")
    remove_x 함수는 days리스트 안에 넘겨 받은 단어(여기선 "Mon")가 있으면 삭제를 시키는 함수입니다.
    리스트의 요소를 삭제할 땐 remove() 메서드를 사용합니다.
    참고 링크
    단, remove() 는 값이 같은 첫번째 요소만 삭제합니다. 예를 들어 list = ["A", "B", "A"] 라는 리스트가 존재할 때, list.remove("A") 를 실행 시키면 list의 결과는 list = ["B", "A"] 가 됩니다. 첫번째 "A"만 삭제 되고 뒤에 있던 "A"는 삭제되지 않고 그대로 있는 것을 확인할 수 있습니다.
    따라서 함수 remove_x 의 리턴 값은 a_list.remove(word) 라고 작성해주시면 됩니다.
--------------------------------------------------------------------------------------------------